1、单引号内只能放一个字符。 字符常量 'a' √  'ab' ×  字符串常量 "abc"  √
2、八进制   满八进一    以0开头。
   十六进制 满十六进一  以0x开头。
3、二进制与八进制转换：从右侧起，三位表示一位。
   二进制与十六进制抓换：从右侧起，四位表示一位。
4、负数的二进制表现形式：整数的二进制取反加1 （整数1，相加时先转换为二进制00000000 00000000 00000000 00000001）
  （引申：整型在计算机中占四个字节，即32位。所以6在计算机中存储形式位：00000000 00000000 00000000 00000110）
5、负数的最高位永远为1，正数为0.

6、变量：就是将不确定的数据进行存储。也就是在内存中开辟一个空间（通过明确数据类型，变量名称，数据来完成）

7、转义字符：通过\来转变后面字母或者符号的含义
	      \n ：换行
	      \b :退格
	      \r : 按下回车键。 Linux中换行即 \n  window系统中 回车符由两个字符表示\r\n
	      \t : 制表符。相当于tab键
   比较运算符：java中不存在 4<a<10; X  
8、逻辑运算符：
   与   & ：真真才真 有假为假 
   或   | ：假假才假，有真为真
   异或 ^ : 两边同为假，两边不同为真
   &&：当左边为假时，右边不运算  目的是提高效率；
   ||：当左边为真时，右边不运算  目的是提高效率；
9、位运算符：
   1、左移末尾补0
   左移数增大；结果为 数 *（2^移的位数） 3左移2位 = 12   
   2、带符号右移 >>  ：右移首端补0/1，取决于原最高位是0/1
   右移数减小；结果为 数 /（2^移的位数） 6右移2位 = 1 
   3、无符号右移 >>> ：右移首端补0
   4、取反：System.out.println(~6);   //-7 先转化为二进制，然后取反，得到一个负数。负数转化为十进制：先减一，再取反。最后切记加上负号
      捷径：易知 ~6+1 = -6  <==> 求6的负数表现形式：6取反加1。则~6=-6-1=-7

   5、一个数a异或^两次同一个数b，结果仍为本身a。 //可以用于加密、解密。密匙为b

10、利用最有效的方式计算2*8：
    原式==》 2*2^3 ==》对2进行位运算 ，左移3位 ==》 0000 0010 ==》00010000 = 16
11、练习：
    对两个整数变量 进行互换，不允许使用第三方变量。m=2 ,n=6
    1、求和：   n = m + n ;   
                m = n - m ;
                n = n - m;
	如果 m、n 过于大,加法可能会使和超出int范围。
    2、异或；   n = n ^ m ;
                m = n ^ m ;//(n^m)^m
		n = n ^ m ;//n^(n^m)
    3、实现获取一个整数的十六进制数（八进制同理）, 60为例（00000000 00000000 00000000 0011-1100）
       int num = 60;
       a = num & 15  ;     //= 12 通过与15（1111）的与运算得到60的最低四位 1100
       int temp = 60 >>> 4; // 右移4位运算实现获取下一组四位 00000000 00000000 00000000 0011 无符号右移可以实现不管正负数，最终都可以移完.
       b = temp & 15 ;     //= 3 对temp的值进行获取最低四位 0011
       /* 将 十六进制数据输出 */
       c = a - 10;	   //1~9 A B C D E F	
       d = c + 'A';        //2 + 65 = 67  A-65 B-66 ......
       char(d);            //输出ASCII对应的字符C
   
12、三元表达式  (条件表达式)？表达式1:表达式2; 条件表达式为true执行1，false执行2
     优势：简化if else代码
     弊端：因为是一个运算符，所以运算完必须要有结果；

13、switch特点：1、x的类型只能有四种：byte short int char 
                2、case之间的位置没有先后顺序，执行是依次执行，但是default不管位置在哪，总是最后执行。
                3、switch 的两种结束方式：至break；至最后的大括号} 
		4、当数据为具体数值且不多时，用Switch更加高效。其余情况用if(特别是有区间判断，或者判断的数值类型为boolean)
      switch(x)                                 
      {						  
         case 2:                                  
	   表达式1                                 

	   break;
	 case 6:
	   表达式2
	   break;
	 default:
	   表达式2
	   break; //此处的break可以省略
      }
例：
      int a=2,b=4;
      char ch = '+';
      switch(ch)
      {
         case '+':
         System.out.println(a+b); 
      }





















