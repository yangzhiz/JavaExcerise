1、while(条件表达式)    //若写成while(); 程序可以编译，但是循环体与条件不再关联，所以while语句将一直循环，陷入死循环。
   {
       执行语句；
   } //先判断条件，满足条件才执行循环体
-----------------------------------------------------------------------------------------
   do
   { 
       执行语句；
   }
   while(条件表达式); //先执行一次循环体，在判断条件，满足继续执行循环体

   for(初始化表达式;条件表达式;循环后的操作表达式)
   {
       执行语句；  
   }   
   //初始化表达式-->条件表达式-->执行语句-->循环后的操作表达式-->条件表达式-->执行语句...
   1、变量有自己的作用域，对于for来讲：如果将用于控制循环的增量定义在for语句中。那么该变量只在for语句内有效。for语句执行完毕，该变量在内存中被释放。
   2、for和while可以互换，但for对内存更加优化，因为执行完循环后，变量不再占用内存。如果需要定义循环增量，用for更加合适
2、无限循环的最简单表现形式：
   for(;;){}//条件表达式默认为true

   while(true){}

3、打印金字塔：尖朝上，可以改变条件，让条件随着外循环变化；；
               尖朝下，可以改变内循环初始化值，让初始化值随外循环变化

4、为了区分内外循环，可以通过命名对循环范围进行标识
    w:for()
    {
        q:for()
	{
	   System.......
	   break w; //直接跳出外循环
	 }
    }
5、continue：结束本次循环，继续下一次循环。
   for()
   {
        continue;//直接跳转到操作表达式
	执行语句;//编译失败。执行语句将执行不到，同理，break之后也不能再有执行语句；
   }
----------------函数---------------------
便于对功能的复用；提高代码的重用性；函数只有在被调用时才执行；函数只能调用函数，而不能在函数中定义函数，函数之间是平级的

1、 public static int getResult(int num) //public 可省 static必须写 因为虚拟机识别的是主函数，而主函数是static静态的，只能调用被static修饰的函数
    {
      执行语句；
      return 返回值；  //只有当返回值类型为void时，return语句才可以省略。否则 返回值必不可少，没有返回值则没有返回值类型，函数不成立。                      
    } 
    注意：
      1.当一个函数返回值类型为void时，可以在该函数的打印语句中直接输出计算结果，而不能在另一个函数的打印语句中调用该函数来输出结果。因为该函数并没有具体的返回值
      2.在定义函数时，主要写该函数需要的功能，并将返回值返回给调用函数，而不需要定义多余的功能或打印操作，那是调用者的事情。
☀2、如何定义一个函数：1、先明确函数的运算结果
                     2、再明确在定义函数功能的过程中是否需要未知的内容参与运算。（例如是否需要调用者传递参数给函数）
		     例如：计算3+4；
		      public static void main(Stringp[] args)
		      {
		          int s = getSum();
			  System.out.println(s);
		      }
		      static int getSum()
		      {
		          return 3+4;
		      }
3、函数重载（overload）：一个类中，一个以上的同名函数，但是参数个数和类型不用。
     when to use ----当定义的功能相同，但是参与运算的位置内容不同；此时，使用重载，方便阅读，通过参数列表的不同来区分多个同名函数。
   注意:一个类中允许两个函数名称相同，参数列表相同。即没有重载。但是不允许这两个函数的返回值类型不同。